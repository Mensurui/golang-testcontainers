name: TestContainers
on: 
  push:
  pull_request:

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker
        run: docker build . --file Dockerfile --tag gotestcon
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Dockerhub
        run: |
          docker tag gotestcon ${{ secrets.DOCKER_USERNAME }}/gotestcon:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/gotestcon:latest
  Test:
    runs-on: ubuntu-latest
    needs: Build
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5s
        env:
          POSTGRES_USER: testcontainer
          POSTGRES_PASSWORD: testcontainer123
          POSTGRES_DB: testcontainersdb
    steps:
      - name: Log in to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull Docker image from Dockerhub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/gotestcon:latest
      - name: Run the Container
        run: |
          docker run -d --name gotestcon-container \
            -e TESTCONADDR: 'postgres://testcontainer:testcontainer123@postgres-1:5432/testcontainersdb?sslmode=disable'\
            ${{ secrets.DOCKER_USERNAME }}/gotestcon:latest
          for i in {1..10}; do
            if [ "$(docker inspect -f '{{.State.Running}}' gotestcon-container)" == "true" ]; then
              break
            fi
            sleep 1
          done
          docker exec gotestcon-container go test -v ./...
          docker stop gotestcon-container
          docker rm gotestcon-container

  Build-and-Test-Dockercompose:
    runs-on: ubuntu-latest
    needs: Test

    services:
      postgres:
        image: postgres:17
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U testcontainer"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5


    steps:
      - name: Check out my code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker compose up -d

      - name: Wait for services to be healthy
        run: docker compose ps
      
      - name: Run Migrations
        run: |
          docker compose run migrate
      
      - name: Run Tests
        run: |
          docker-compose run goapp go test ./...

      - name: Tear down Docker Compose
        if: always()
        run: docker-compose down

 # Test:
#Production:
